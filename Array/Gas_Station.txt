/*
# Algos
[Note]
[Reference]: https://leetcode.com/problems/gas-station/solutions/5070267/easy-as-baby-steps-explained-c-java-python-javascript
[Problem]: https://leetcode.com/problems/gas-station/description/
[Pattern]: Trick
[Tips]: 
[Revision]: 0
[Confidence]: 10%
[Next]: Practice 
[Steps]: 
[Code]	
	
[/Code]
[Tags]: 
[Intution]: 
"""
1. First check if i have enoughh fuel to complete the circuit. That its total gas shlould be greater than total cost
  Next i need to check for each index (skipping why not really sure) 
  Then for each outer index, fuel up and burn, just after fuel up check if current total gas is enough to go till next destination. 
  If not then move the start point to j set flag as false and break away the inner loop.
  try again from this starting index in outer loop. 

  if( j == length of circuit and flag is still true) means car made a round.
  at outer last return -1;
"""
[/Intution]
[QuestionNote]: 
"""

"""
[QuestionNote]
[/Note]
*/
class Solution {
    /*
    There are n gas station.
    ith static - gas[i]
    from i to i+1 - cost[i] - gas will get used up.
    start - gas - 0;

    given gas , cost, tell starting from where can i complete the circuit.
    -1 if cannot
    start in clockwise.

    // understanding question:
    i have a how much i can fill the gas
    second array is how much will be needed to travel.

    ie it should never happen that i run out of fuel
    thing to consider is that i will always have ledt out fuel in tank.
    starting point is all.
    Need to try all variation.

    Steps:
    basic check.
        gas should not be empty array.
        i should have total gas > total cost. Else there is no way i can complete the circuit.
    setup:
    startGas = 0;

    start from each point (loop)
        completed = true;
        fill gas as provided. -> 5 (loop over each gas fill)
            travel
            deduct gasInTaank (5) - cost
            check if now gasInTank goes to negative.
                if yes
                completed = false;
                exit

    if completed == true
        return

    */
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int totalGas = 0;
        int totalCost = 0;
        for(int i = 0; i < gas.length; i++){
            totalGas += gas[i];
            totalCost += cost[i];
        }
        if(totalCost > totalGas){
            return -1;
        }

        for(int i = 0; i < gas.length; i ++){
            boolean completed = true;
            int gasInTank = 0;
            for(int j = i; j < i + gas.length; j++){
                int currStation = j % gas.length;
                gasInTank = gasInTank + gas[currStation];
                gasInTank = gasInTank - cost[currStation];
                // System.out.println("j: "+j+" +gasInTank "+ gasInTank + " cost "+ cost[i]);

                if(gasInTank < 0){
                    completed = false;
                    // System.out.println("breaking --");
                    i = j;
                    break;
                }
            }
            if(completed == true){
                return i;
            }
        }

        return -1;
    }
}